FAIL
Kernel panic in run: PANIC at ../../devices/disk.c:408 in select_sector(): assertion `sec_no < d->capacity' failed.
Call stack: 0x800421880b 0x80042149d9 0x800421413a 0x8004223a73 0x8004222a78 0x8004222c3c 0x8004223030 0x8004222ea5 0x800421dbcc 0x8004209918 0x8004209d36 0x4001f3 0x400d85 0x400dce
Translation of call stack:
0x000000800421880b: debug_panic (lib/kernel/debug.c:32)
0x00000080042149d9: select_sector (devices/disk.c:409)
0x000000800421413a: disk_write (devices/disk.c:241)
0x0000008004223a73: anon_swap_out (vm/anon.c:112 (discriminator 3))
0x0000008004222a78: vm_evict_frame (vm/vm.c:250)
0x0000008004222c3c: vm_get_frame (vm/vm.c:302)
0x0000008004223030: vm_do_claim_page (vm/vm.c:423)
0x0000008004222ea5: vm_try_handle_fault (vm/vm.c:380)
0x000000800421dbcc: page_fault (userprog/exception.c:145)
0x0000008004209918: intr_handler (threads/interrupt.c:352)
0x0000008004209d36: intr_entry (threads/intr-stubs.o:?)
0x00000000004001f3: (unknown)
0x0000000000400d85: (unknown)
0x0000000000400dce: (unknown)

This assertion commonly fails when accessing a file via an inode that
has been closed and freed.  Freeing an inode clears all its sector
indexes to 0xcccccccc, which is not a valid sector number for disks
smaller than about 1.6 TB.
